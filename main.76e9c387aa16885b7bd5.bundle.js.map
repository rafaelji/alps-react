{"version":3,"file":"main.76e9c387aa16885b7bd5.bundle.js","sources":["webpack:///./src/helpers/Element.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport {\n  borderColors,\n  borderAtBreakpoints,\n  borderSides,\n  getBorderClass,\n} from '../atoms/global/borders'\n\nimport {\n  backgroundColorClass,\n  backgroundColors,\n  canBeClass,\n  canBeColors,\n  getThemeBorderClass,\n  getSvgFillClass,\n  linkHoverClass,\n  linkHoverColors,\n  overlayClass,\n  overlayColors,\n  svgFillColors,\n  textColorClass,\n  textColors,\n  themeBackgroundClass,\n  themeBackgroundColors,\n  themeBackgroundTransClass,\n  themeBackgroundTransColors,\n  themeBorderColors,\n  themeColorClass,\n  themeColors,\n  themeLinkHoverClass,\n  themePathFillClass,\n  linkColors,\n  linkClass,\n} from '../atoms/global/colors'\n\nimport {\n  getBaseClass,\n  displayClass,\n  displayOptions,\n  positionClass,\n  positionOptions,\n  sides,\n  vishiddenClass,\n} from '../atoms/global/commons'\n\nimport {\n  flexAlignOptions,\n  flexColumnClass,\n  flexJustifyOptions,\n  getFlexClass,\n} from '../atoms/global/flex'\n\nimport {\n  fontSizes,\n  fontTypes,\n  fontWeightClass,\n  fontWeights,\n  getFontClass,\n  getTextAlignClass,\n  textAlignOptions,\n  textStrongClass,\n  textTransformClass,\n  textTransforms,\n} from '../atoms/global/fonts'\n\nimport {\n  getGridClass,\n  getGridItemClass,\n  shiftBreakpoints,\n  shiftSides,\n  wrapSizes,\n} from '../atoms/global/grids'\n\nimport {\n  clearFixClass,\n  getPaddingClass,\n  getSpaceClass,\n  getSpacingClass,\n  spaceAfterSizes,\n  spaceSides,\n  spacingSizes,\n  spacingAfterSizes,\n  spacingUntilSizes,\n} from '../atoms/global/spacing'\n\n/**\n * The ubiquitous Element component\n *\n * @param {Object} props All Element's props\n */\nexport default function Element({ as, children, tag, forwardedRef, ...props }) {\n  // Extract style-related props to build `className`\n  const {\n    backgroundColor,\n    border,\n    borderAt,\n    borderColor,\n    borderSide,\n    canBe,\n    className,\n    clearFix,\n    color,\n    display,\n    flex,\n    flexAlign,\n    flexColumn,\n    flexEnd,\n    flexJustify,\n    flexNoWrap,\n    flexWrap,\n    fontSize,\n    fontType,\n    fontWeight,\n    gridItem,\n    gridItemSize,\n    gridItemSizeAtS,\n    gridItemSizeAtM,\n    gridItemSizeAtL,\n    gridItemSizeAtXL,\n    noGridClass,\n    noGridItemClass,\n    noGridWrapClass,\n    gridWrap,\n    gridNoGutters,\n    linkColor,\n    linkHoverColor,\n    overlay,\n    padding,\n    paddingSide,\n    paddingSize,\n    pathFill,\n    position,\n    seven,\n    sevenInner,\n    shiftAt,\n    shiftSide,\n    space,\n    spaceSide,\n    spaceSize,\n    spacing,\n    spacingAfter,\n    spacingSize,\n    spacingUntil,\n    strong,\n    textAlign,\n    themeBackground,\n    themeBackgroundTrans,\n    themeBorder,\n    themeBorderSide,\n    themeColor,\n    themeLinkHover,\n    themePathFill,\n    transform,\n    vishidden,\n\n    ...otherProps // Other props will be provided here\n  } = props\n\n  // Set classes:\n  const classes = []\n\n  if (className) classes.push(className)\n\n  // - Color classes\n  if (backgroundColor)\n    classes.push(getBaseClass(backgroundColorClass, backgroundColor))\n  if (canBe) classes.push(getBaseClass(canBeClass, canBe))\n  if (color) classes.push(getBaseClass(textColorClass, color))\n  if (pathFill) classes.push(getSvgFillClass(pathFill))\n\n  // - Font classes\n  if (fontType)\n    classes.push(\n      getFontClass({\n        type: fontType,\n        size: fontSize,\n      })\n    )\n  if (strong) classes.push(textStrongClass)\n  if (transform) classes.push(getBaseClass(textTransformClass, transform))\n  if (fontWeight) classes.push(getBaseClass(fontWeightClass, fontWeight))\n  if (textAlign) classes.push(getTextAlignClass({ align: textAlign }))\n  if (linkColor) classes.push(getBaseClass(linkClass, linkColor))\n  if (linkHoverColor) classes.push(getBaseClass(linkHoverClass, linkHoverColor))\n\n  // - Border classes\n  if (border || borderAt || borderColor || borderSide)\n    classes.push(\n      getBorderClass({\n        at: borderAt,\n        color: borderColor,\n        side: borderSide,\n      })\n    )\n\n  // - Spacing classes\n\n  if (clearFix) classes.push(clearFixClass)\n\n  if (padding) classes.push(getPaddingClass({}))\n\n  if (paddingSide || paddingSize)\n    classes.push(\n      getPaddingClass({\n        side: paddingSide,\n        size: paddingSize,\n      })\n    )\n\n  if (space || spaceSide || spaceSize)\n    classes.push(\n      getSpaceClass({\n        side: spaceSide,\n        size: spaceSize,\n      })\n    )\n\n  if (spacing || spacingAfter || spacingSize || spacingUntil)\n    classes.push(\n      getSpacingClass({\n        after: spacingAfter,\n        size: spacingSize,\n        until: spacingUntil,\n      })\n    )\n\n  // - Flex\n  if (flex) classes.push(getFlexClass())\n  if (flexColumn) classes.push(flexColumnClass)\n  if (flexEnd) classes.push(getFlexClass({ end: flexEnd }))\n  if (flexNoWrap || flexWrap)\n    classes.push(getFlexClass({ wrap: flexWrap, noWrap: flexNoWrap }))\n  if (flexAlign) classes.push(getFlexClass({ align: flexAlign }))\n  if (flexJustify) classes.push(getFlexClass({ justify: flexJustify }))\n\n  // - Grid\n  if (\n    seven ||\n    sevenInner ||\n    shiftAt ||\n    shiftSide ||\n    gridWrap ||\n    gridNoGutters\n  ) {\n    classes.push(\n      ...getGridClass({\n        seven,\n        sevenInner,\n        shiftAt,\n        shiftSide,\n        wrap: gridWrap,\n        noGridClass,\n        noWrapClass: noGridWrapClass,\n        noGutters: gridNoGutters,\n      })\n    )\n  }\n\n  // - Grid Item\n  if (\n    gridItem ||\n    gridItemSize ||\n    gridItemSizeAtS ||\n    gridItemSizeAtM ||\n    gridItemSizeAtL ||\n    gridItemSizeAtXL\n  ) {\n    classes.push(\n      ...getGridItemClass({\n        size: gridItemSize,\n        sizeAtS: gridItemSizeAtS,\n        sizeAtM: gridItemSizeAtM,\n        sizeAtL: gridItemSizeAtL,\n        sizeAtXL: gridItemSizeAtXL,\n        noItemClass: noGridItemClass,\n      })\n    )\n  }\n\n  // - Display\n\n  // Remove from the flow but leave available to screen readers\n  if (display) classes.push(getBaseClass(displayClass, display))\n  if (position) classes.push(getBaseClass(positionClass, position))\n  if (vishidden) classes.push(vishiddenClass)\n\n  // - Theme classes\n  if (themeBorder)\n    classes.push(\n      getThemeBorderClass({ color: themeBorder, side: themeBorderSide })\n    )\n  if (themeBackground)\n    classes.push(getBaseClass(themeBackgroundClass, themeBackground))\n  if (themeBackgroundTrans)\n    classes.push(getBaseClass(themeBackgroundTransClass, themeBackgroundTrans))\n  if (themeColor) classes.push(getBaseClass(themeColorClass, themeColor))\n  if (themeLinkHover)\n    classes.push(getBaseClass(themeLinkHoverClass, themeLinkHover))\n  if (overlay) classes.push(getBaseClass(overlayClass, overlay))\n  if (themePathFill)\n    classes.push(getBaseClass(themePathFillClass, themePathFill))\n\n  // Build all props\n  const allProps = {\n    className: classes.length > 0 ? classes.join(' ') : null,\n    ref: forwardedRef,\n    ...otherProps,\n  }\n\n  return React.createElement(tag ? tag : as, allProps, children)\n}\n\nexport const gridItemSizePropType = PropTypes.oneOfType([\n  PropTypes.number,\n  PropTypes.string,\n])\n\nElement.propTypes = {\n  as: PropTypes.string,\n  backgroundColor: PropTypes.oneOf(backgroundColors),\n  border: PropTypes.bool,\n  borderAt: PropTypes.oneOf(borderAtBreakpoints),\n  borderColor: PropTypes.oneOf(borderColors),\n  borderSide: PropTypes.oneOf(borderSides),\n  canBe: PropTypes.oneOf(canBeColors),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  clearFix: PropTypes.bool,\n  color: PropTypes.oneOf(textColors),\n  display: PropTypes.oneOf(displayOptions),\n  flex: PropTypes.bool,\n  flexAlign: PropTypes.oneOf(flexAlignOptions),\n  flexColumn: PropTypes.bool,\n  flexJustify: PropTypes.oneOf(flexJustifyOptions),\n  fontSize: PropTypes.oneOf(fontSizes),\n  fontType: PropTypes.oneOf(fontTypes),\n  fontWeight: PropTypes.oneOf(fontWeights),\n  forwardedRef: PropTypes.object,\n  gridNoGutters: PropTypes.bool,\n  gridItem: PropTypes.bool,\n  gridItemSize: gridItemSizePropType,\n  gridItemSizeAtS: gridItemSizePropType,\n  gridItemSizeAtM: gridItemSizePropType,\n  gridItemSizeAtL: gridItemSizePropType,\n  gridItemSizeAtXL: gridItemSizePropType,\n  gridWrap: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(wrapSizes)]),\n  noGridClass: PropTypes.bool,\n  noGridItemClass: PropTypes.bool, // TODO: This is required as some items, like `.c-drawer__container` has a \"grid-item\"'s size class, but not `.l-grid-item`,\n  noGridWrapClass: PropTypes.bool,\n  linkColor: PropTypes.oneOf(linkColors),\n  linkHoverColor: PropTypes.oneOf(linkHoverColors),\n  overlay: PropTypes.oneOf(overlayColors),\n  padding: PropTypes.oneOfType([PropTypes.bool, PropTypes.array]),\n  paddingSide: PropTypes.oneOfType([\n    PropTypes.array,\n    PropTypes.oneOf(spaceSides),\n  ]),\n  paddingSize: PropTypes.oneOf(spacingSizes),\n  pathFill: PropTypes.oneOf(svgFillColors),\n  position: PropTypes.oneOf(positionOptions),\n  seven: PropTypes.bool,\n  sevenInner: PropTypes.bool,\n  shiftAt: PropTypes.oneOf(shiftBreakpoints),\n  shiftSide: PropTypes.oneOf(shiftSides),\n  space: PropTypes.bool,\n  spaceAfter: PropTypes.oneOf(spaceAfterSizes),\n  spaceSide: PropTypes.oneOf(spaceSides),\n  spaceSize: PropTypes.oneOf(spacingSizes),\n  spacing: PropTypes.bool,\n  spacingAfter: PropTypes.oneOf(spacingAfterSizes),\n  spacingSize: PropTypes.oneOf(spacingSizes),\n  spacingUntil: PropTypes.oneOf(spacingUntilSizes),\n  strong: PropTypes.bool,\n  tag: PropTypes.string,\n  textAlign: PropTypes.oneOf(textAlignOptions),\n  themeBackground: PropTypes.oneOf(themeBackgroundColors),\n  themeBackgroundTrans: PropTypes.oneOf(themeBackgroundTransColors),\n  themeBorder: PropTypes.oneOf(themeBorderColors),\n  themeBorderSide: PropTypes.oneOf(sides),\n  themeColor: PropTypes.oneOf(themeColors),\n  themeLinkHover: PropTypes.oneOf(themeColors),\n  themePathFill: PropTypes.oneOf(themeColors),\n  transform: PropTypes.oneOf(textTransforms),\n  vishidden: PropTypes.bool,\n}\nElement.defaultProps = {\n  as: 'div',\n  noGridClass: false,\n  noGridItemClass: false,\n  noGridWrapClass: false,\n}\n\n// Some shortcut components for a more \"semantic\" structure\n\n// - Headings and Paragraphs:\n\nexport function HeadingOne(props) {\n  return <Element {...props} as=\"h1\" />\n}\nHeadingOne.propTypes = Element.propTypes\n\nexport function HeadingTwo(props) {\n  return <Element {...props} as=\"h2\" />\n}\nHeadingTwo.propTypes = Element.propTypes\n\nexport function HeadingThree(props) {\n  return <Element {...props} as=\"h3\" />\n}\nHeadingThree.propTypes = Element.propTypes\n\nexport function HeadingFour(props) {\n  return <Element {...props} as=\"h4\" />\n}\nHeadingFour.propTypes = Element.propTypes\n\nexport function Paragraph(props) {\n  return <Element {...props} as=\"p\" />\n}\nParagraph.propTypes = Element.propTypes\n\n// - Lists\n\nexport function UL(props) {\n  return <Element {...props} as=\"ul\" />\n}\nUL.propTypes = Element.propTypes\n\nexport function LI(props) {\n  return <Element {...props} as=\"li\" />\n}\nLI.propTypes = Element.propTypes\n\n// - Links\n\nexport function Link(props) {\n  return <Element {...props} as=\"a\" />\n}\nLink.propTypes = Element.propTypes\n\n// - Sections\n\nexport function Div(props) {\n  return <Element {...props} as=\"div\" />\n}\nDiv.propTypes = Element.propTypes\n\nexport function Span(props) {\n  return <Element {...props} as=\"span\" />\n}\nSpan.propTypes = Element.propTypes\n\nexport function Article(props) {\n  return <Element {...props} as=\"article\" />\n}\nArticle.propTypes = Element.propTypes\n\nexport function Section(props) {\n  return <Element {...props} as=\"section\" />\n}\nSection.propTypes = Element.propTypes\n\nexport function Header(props) {\n  return <Element {...props} as=\"header\" />\n}\nHeader.propTypes = Element.propTypes\n\nexport function Footer(props) {\n  return <Element {...props} as=\"footer\" />\n}\nFooter.propTypes = Element.propTypes\n\nexport function Nav(props) {\n  return <Element {...props} as=\"nav\" />\n}\nNav.propTypes = Element.propTypes\n\n// - Forms\n\nexport function Form(props) {\n  return <Element {...props} as=\"form\" />\n}\nForm.propTypes = Element.propTypes\n\n// Use this component when a ref need to be passed to the element\nexport const ElementWithRef = React.forwardRef((props, ref) => (\n  <Element {...props} forwardedRef={ref} />\n))\n\n// Div version\nexport const DivWithRef = React.forwardRef((props, ref) => (\n  <Div {...props} forwardedRef={ref} />\n))\n"],"mappings":"AA4FA","sourceRoot":""}